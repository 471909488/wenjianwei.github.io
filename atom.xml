<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shindavidwei</title>
  
  
  <link href="http://www.iwjw.top/atom.xml" rel="self"/>
  
  <link href="http://www.iwjw.top/"/>
  <updated>2021-07-09T07:22:47.876Z</updated>
  <id>http://www.iwjw.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql</title>
    <link href="http://www.iwjw.top/2021/09/28/20210790/"/>
    <id>http://www.iwjw.top/2021/09/28/20210790/</id>
    <published>2021-09-27T16:00:00.000Z</published>
    <updated>2021-07-09T07:22:47.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建表-amp-插入数据"><a href="#创建表-amp-插入数据" class="headerlink" title="创建表 &amp;插入数据"></a>创建表 &amp;插入数据</h2><blockquote><p>create database db02;</p><p>use db02;</p><p>create table users(id int,name varchar(255),address varchar(255));</p><p>inset into users valures(1,’tom’ , ‘Beijing’);</p></blockquote><h2 id="Mysql的三层结构-破除神秘"><a href="#Mysql的三层结构-破除神秘" class="headerlink" title="Mysql的三层结构-破除神秘"></a>Mysql的三层结构-破除神秘</h2><p><img src="QQ%E6%88%AA%E5%9B%BE20210709151254.png" alt="QQ截图20210709151254"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建表-amp-插入数据&quot;&gt;&lt;a href=&quot;#创建表-amp-插入数据&quot; class=&quot;headerlink&quot; title=&quot;创建表 &amp;amp;插入数据&quot;&gt;&lt;/a&gt;创建表 &amp;amp;插入数据&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;create database</summary>
      
    
    
    
    
    <category term="Mysql" scheme="http://www.iwjw.top/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础之变量和常量</title>
    <link href="http://www.iwjw.top/2021/06/16/20210616/"/>
    <id>http://www.iwjw.top/2021/06/16/20210616/</id>
    <published>2021-06-16T03:34:15.000Z</published>
    <updated>2021-06-15T04:03:08.129Z</updated>
    
    <content type="html"><![CDATA[<p>变量和常量是编程中必不可少的部分，也是很好理解的一部分。</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>在编程语言中标识符就是程序员定义的具有特殊意义的词，比如变量名、常量名、函数名等等。 Go语言中标识符由字母数字和<code>_</code>(下划线）组成，并且只能以字母和<code>_</code>开头。 举几个例子：<code>abc</code>, <code>_</code>, <code>_123</code>, <code>a123</code>。</p><br/><br/><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>关键字是指编程语言中预先定义好的具有特殊含义的标识符。 关键字和保留字都不建议用作变量名。</p><p>Go语言中有25个关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>        <span class="keyword">default</span>      <span class="function"><span class="keyword">func</span>         <span class="title">interface</span>    <span class="title">select</span></span></span><br><span class="line"><span class="keyword">case</span>         <span class="keyword">defer</span>        <span class="keyword">go</span>           <span class="keyword">map</span>          <span class="keyword">struct</span></span><br><span class="line"><span class="keyword">chan</span>         <span class="keyword">else</span>         <span class="keyword">goto</span>         <span class="keyword">package</span>      <span class="keyword">switch</span></span><br><span class="line"><span class="keyword">const</span>        <span class="keyword">fallthrough</span>  <span class="keyword">if</span>           <span class="keyword">range</span>        <span class="keyword">type</span></span><br><span class="line"><span class="keyword">continue</span>     <span class="keyword">for</span>          <span class="keyword">import</span>       <span class="keyword">return</span>       <span class="keyword">var</span></span><br></pre></td></tr></table></figure><p>此外，Go语言中还有37个保留字。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Constants:    <span class="literal">true</span>  <span class="literal">false</span>  <span class="literal">iota</span>  <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    Types:    <span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span>  </span><br><span class="line">              <span class="keyword">uint</span>  <span class="keyword">uint8</span>  <span class="keyword">uint16</span>  <span class="keyword">uint32</span>  <span class="keyword">uint64</span>  <span class="keyword">uintptr</span></span><br><span class="line">              <span class="keyword">float32</span>  <span class="keyword">float64</span>  <span class="keyword">complex128</span>  <span class="keyword">complex64</span></span><br><span class="line">              <span class="keyword">bool</span>  <span class="keyword">byte</span>  <span class="keyword">rune</span>  <span class="keyword">string</span>  error</span><br><span class="line"></span><br><span class="line">Functions:   <span class="built_in">make</span>  <span class="built_in">len</span>  <span class="built_in">cap</span>  <span class="built_in">new</span>  <span class="built_in">append</span>  <span class="built_in">copy</span>  <span class="built_in">close</span>  <span class="built_in">delete</span></span><br><span class="line">             <span class="built_in">complex</span>  <span class="built_in">real</span>  <span class="built_in">imag</span></span><br><span class="line">             <span class="built_in">panic</span>  <span class="built_in">recover</span></span><br></pre></td></tr></table></figure><br/><br/><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。</p><br/><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。</p><p>Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。</p><br/><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。 并且Go语言的变量声明后必须使用。</p><br/><h3 id="标准声明"><a href="#标准声明" class="headerlink" title="标准声明"></a>标准声明</h3><p>Go语言的变量声明格式为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 变量类型</span><br></pre></td></tr></table></figure><p>变量声明以关键字<code>var</code>开头，变量类型放在变量的后面，行尾无需分号。 举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> isOk <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><h3 id="批量声明"><a href="#批量声明" class="headerlink" title="批量声明"></a>批量声明</h3><p>每声明一个变量就需要写<code>var</code>关键字会比较繁琐，go语言中还支持批量变量声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="keyword">string</span></span><br><span class="line">    b <span class="keyword">int</span></span><br><span class="line">    c <span class="keyword">bool</span></span><br><span class="line">    d <span class="keyword">float32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><br><h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><p>Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为<code>0</code>。 字符串变量的默认值为<code>空字符串</code>。 布尔型变量默认为<code>false</code>。 切片、函数、指针变量的默认为<code>nil</code>。</p><p>当然我们也可在声明变量的时候为其指定初始值。变量初始化的标准格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> = <span class="string">&quot;Q1mi&quot;</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> = <span class="number">18</span></span><br></pre></td></tr></table></figure><p>或者一次初始化多个变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name, age = <span class="string">&quot;Q1mi&quot;</span>, <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h4><p>有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Q1mi&quot;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br></pre></td></tr></table></figure><h4 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h4><p>在函数内部，可以使用更简略的 <code>:=</code> 方式声明并初始化变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 全局变量m</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">10</span></span><br><span class="line">m := <span class="number">200</span> <span class="comment">// 此处声明局部变量m</span></span><br><span class="line">fmt.Println(m, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h4><p>在使用多重赋值时，如果想要忽略某个值，可以使用<code>匿名变量（anonymous variable）</code>。 匿名变量用一个下划线<code>_</code>表示，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>, <span class="string">&quot;Q1mi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x, _ := foo()</span><br><span class="line">_, y := foo()</span><br><span class="line">fmt.Println(<span class="string">&quot;x=&quot;</span>, x)</span><br><span class="line">fmt.Println(<span class="string">&quot;y=&quot;</span>, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在<code>Lua</code>等编程语言里，匿名变量也被叫做哑元变量。)</p><p>注意事项：</p><ol><li>函数外的每个语句都必须以关键字开始（var、const、func等）</li><li><code>:=</code>不能使用在函数外。</li><li><code>_</code>多用于占位，表示忽略值。</li></ol><br><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把<code>var</code>换成了<code>const</code>，常量在定义的时候必须赋值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.1415</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="number">2.7182</span></span><br></pre></td></tr></table></figure><p>声明了<code>pi</code>和<code>e</code>这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。</p><p>多个常量也可以一起声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    pi = <span class="number">3.1415</span></span><br><span class="line">    e = <span class="number">2.7182</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>const同时声明多个常量时，如果省略了值则表示和上面一行的值相同。 例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    n1 = <span class="number">100</span></span><br><span class="line">    n2</span><br><span class="line">    n3</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面示例中，常量<code>n1</code>、<code>n2</code>、<code>n3</code>的值都是100。</p><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><p><code>iota</code>是go语言的常量计数器，只能在常量的表达式中使用。</p><p><code>iota</code>在const关键字出现时将被重置为0。const中每新增一行常量声明将使<code>iota</code>计数一次(iota可理解为const语句块中的行索引)。 使用iota能简化定义，在定义枚举时很有用。</p><p>举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">n2        <span class="comment">//1</span></span><br><span class="line">n3        <span class="comment">//2</span></span><br><span class="line">n4        <span class="comment">//3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="几个常见的iota示例"><a href="#几个常见的iota示例" class="headerlink" title="几个常见的iota示例:"></a>几个常见的iota示例:</h4><p>使用<code>_</code>跳过某些值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">n2        <span class="comment">//1</span></span><br><span class="line">_</span><br><span class="line">n4        <span class="comment">//3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>iota</code>声明中间插队</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">n1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">n2 = <span class="number">100</span>  <span class="comment">//100</span></span><br><span class="line">n3 = <span class="literal">iota</span> <span class="comment">//2</span></span><br><span class="line">n4        <span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> n5 = <span class="literal">iota</span> <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>定义数量级 （这里的<code>&lt;&lt;</code>表示左移操作，<code>1&lt;&lt;10</code>表示将1的二进制表示向左移10位，也就是由<code>1</code>变成了<code>10000000000</code>，也就是十进制的1024。同理<code>2&lt;&lt;2</code>表示将2的二进制表示向左移2位，也就是由<code>10</code>变成了<code>1000</code>，也就是十进制的8。）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">_  = <span class="literal">iota</span></span><br><span class="line">KB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">MB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">GB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">TB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">PB = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>多个<code>iota</code>定义在一行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a, b = <span class="literal">iota</span> + <span class="number">1</span>, <span class="literal">iota</span> + <span class="number">2</span> <span class="comment">//1,2</span></span><br><span class="line">c, d                      <span class="comment">//2,3</span></span><br><span class="line">e, f                      <span class="comment">//3,4</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;变量和常量是编程中必不可少的部分，也是很好理解的一部分。&lt;/p&gt;
&lt;h2 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;标识符&lt;/h2&gt;&lt;p&gt;在编程语言中标识符就是程序员定义的具有特殊意义的词，比如变量</summary>
      
    
    
    
    
    <category term="变量" scheme="http://www.iwjw.top/tags/%E5%8F%98%E9%87%8F/"/>
    
    <category term="常量" scheme="http://www.iwjw.top/tags/%E5%B8%B8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础</title>
    <link href="http://www.iwjw.top/2021/06/15/20210615/"/>
    <id>http://www.iwjw.top/2021/06/15/20210615/</id>
    <published>2021-06-14T16:00:00.000Z</published>
    <updated>2021-06-15T03:46:52.681Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="/2021/06/16/20210616/">1.Go语言基础之变量和常量</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;/2021/06/16/20210616/&quot;&gt;1.Go语言基础之变量和常量&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="编程开发" scheme="http://www.iwjw.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Go语言基础" scheme="http://www.iwjw.top/tags/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>如何用王家卫的方式表白</title>
    <link href="http://www.iwjw.top/2021/06/11/20210612/"/>
    <id>http://www.iwjw.top/2021/06/11/20210612/</id>
    <published>2021-06-10T16:00:00.000Z</published>
    <updated>2021-06-11T02:52:59.294Z</updated>
    
    <content type="html"><![CDATA[<p>有一次，王家卫让演员们翻译“i love you” 有的演员翻译成 “我爱你”。</p><p>王家伟说：“怎么可以这样讲话 应该是 ‘我已经很久没有做过摩托车了，也很久未试过这么接近一个人了，</p><p>虽然我知道这条路不是很远，我知道不就自己就会下车，可是这一分钟，我觉得很暖’”。</p><br/><p><strong>可以见得王家卫荣的表白方式应该是深含蓄但是洒脱、不羁、不纠缠。</strong></p><br/><p><strong>先来几个王家卫本人的经典示爱桥段：</strong></p><br/><p>1.以前我认为那句话很重要，因为我觉得有些话说出来就是一生一世，现在想一想，说不说也没有分别，</p><p>有些事是会变的。</p><br/><p>2.我很快就适应了这种生活，虽然有时只是逢场作戏，虽然有许多只是露水情缘，不过没关系了，哪来那么多一生一世。</p><br/><p>3.虽然我很喜欢她，但是我不想让她知道，因为我明白得不到的东西永远是最好的。每次我凝望着那小孩子，我知道她的心里其实在想着另一个人。</p><br/><p>4.有时候我昨天遇到一个人，感觉他非常有意思，印象深刻，但后来就再也碰不上了，人生就是这样。</p><br/><p>5.我只是希望他放开我，结果，他现在放手了，我只感到痛。我痛得肝肠寸断。</p><br/><p>6.想想说人生无悔，都是赌气的话，人生若无悔，那该多无趣啊。叶先生，说句真心话，我心里有过你。我把这话告诉你也没什么，喜欢人不犯法，可我也只能到喜欢为止了。这些话我没对谁说过，今晚见了你，不知道为什么就都说出来了。就让你我的恩怨像棋盘一样，保留在那儿。你多保重。</p><br/><p>7.厨房里有煮好的饭，另外我还买了几个杯子，我知道，用不了多久就都会被打破，所以我偷偷藏起了一个，到有一天你需要那个杯子的时候，就打一个电话给我，我会告诉你放在什么地方。</p><br/><p>8.十六号，四月十六号。一九六零年四月十六号下午三点之前的一分钟你和我在一起，因为你，我会记住这一分钟。</p><br/><p>9.我知道那个人不会再来，可我还是在等。我在门口坐了两天两夜，看着天空不断变化，我才发现原来我到这里这么久，却从来没有看清楚这片天空。</p><br/><ol start="10"><li>我曾经爱上一个人，后来她走了。我去2046，是因为我以为她在那里等我，但我找不到她。我很想知道她到底喜不喜欢我，但我始终得不到答案。</li></ol><br/><br/><br/><p><strong>那么现在，掌握了基本风格，也赏析了经典例句，我们就可以开始尝试着创作了。</strong></p><br/><p>1.我承认我是在意你的，但这不能成为我限制你的借口。你说你不讨厌蓝莓，但你还是为橙子结了账。我该走了，你不讨厌我，我代替不了他。</p><br/><p>2.遇见你的时候，说实话，挺意外的。过去的我和现在的你一样，都不相信谁能忘不了谁。想赞美，天时地利，仔细想了想，还是没说出口。差了点人和，其他都不算好运气。</p><br/><p>3.不知道现在有没有人和你一起看月亮，但我知道不该追问的问题，永远也不会有答案。大概也不是很遗憾，都是些闲敲棋子落灯花时的闲情。我总是这样和别人说，用来说服自己轻一点回忆你。</p><br/><p>4.那天你说想吃巷子口的拉面。我买了两碗，你却不在身边。不加葱，多辣，你看我记得多清楚。</p><br/><p>5.和你在一起的三个小时真是非常愉快。你许诺以后，我没当真，我知道天一亮一切都会结束了。即使这样，你在我左边，月亮在我右边的那一秒，我还是忍不住想，万一呢，万一你会改变主意。</p><br/><p><b>天亮后你还是走了，我很开心。你没因为我改变，正是我欣赏的一面。</b></p><br/><p>当然了，以上只是练笔，不是示范，想要非常“王家卫”，最重要的还是需要动用深情，需要你“爱过”。</p><p><br/><br/></p><p>———- <a href="https://www.zhihu.com/question/31119593/answer/343731222">转载于知乎有书</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有一次，王家卫让演员们翻译“i love you” 有的演员翻译成 “我爱你”。&lt;/p&gt;
&lt;p&gt;王家伟说：“怎么可以这样讲话 应该是 ‘我已经很久没有做过摩托车了，也很久未试过这么接近一个人了，&lt;/p&gt;
&lt;p&gt;虽然我知道这条路不是很远，我知道不就自己就会下车，可是这一分钟，</summary>
      
    
    
    
    <category term="情感" scheme="http://www.iwjw.top/categories/%E6%83%85%E6%84%9F/"/>
    
    
    <category term="情感" scheme="http://www.iwjw.top/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Resume of David Wei</title>
    <link href="http://www.iwjw.top/2016/09/27/201609270452/"/>
    <id>http://www.iwjw.top/2016/09/27/201609270452/</id>
    <published>2016-09-26T20:55:00.000Z</published>
    <updated>2019-09-27T01:25:18.900Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">姓名：温剑威</th><th align="left">出生年月日：19960206</th></tr></thead><tbody><tr><td align="left"><strong>性别：男</strong></td><td align="left"><strong>现居住地：广州市天河区</strong></td></tr><tr><td align="left"><strong>电话：13926259736</strong></td><td align="left"><strong>mail:</strong><a href="jww1996@foxmail.com">jww1996@foxmail.com</a></td></tr></tbody></table><br/><br/><br/><br/><h3 id="IT技能专长："><a href="#IT技能专长：" class="headerlink" title="IT技能专长："></a><strong>IT技能专长：</strong></h3><p><strong><hr></strong></p><ol><li><p>熟练使用python进行后端开发</p></li><li><p>熟练使用Django ：ORM，Form，Template，Tags，Middleware自定制等技术</p></li><li><p>熟练使用PHP，ThinkPHP ，HTML，CSS，JavaScript，JQuery，Ajax，Bootstrap等页面开发技术</p></li><li><p>熟练Socket网络编程，多线程，多进程，协程，异步IO多路复用如select/poll/epoll 的原理及使用</p></li><li><p>熟练使用装饰器，迭代器，生成器及单例模式的使用</p></li><li><p>熟练操作MySQL，基础的增删改查语句，会使用关联查询等较复杂语句，对存储过程，事物操做有一定的了解</p></li><li><p>熟悉requests模块及爬虫框架Scrapy进行网页爬取，解析，并了解其原理</p></li><li><p>熟悉Numpy、Pandas、Matplotlib、Seaborn数据分析库</p></li><li><p>熟悉Tensorflow、Caffe等人工智能开发框架</p></li><li><p>熟悉机器学习常用算法（线性回归、逻辑回归、贝叶斯、决策树、SVM、降维、聚类、EM等）及代码实现</p></li><li><p>了解深度学习算法RNN,LSTM,GAN,DCGAN,DQN,CNN等</p></li><li><p>了解常见的算法与数据结构 如（冒泡排序，堆排序，快速排序）等 </p><p>​         </p></li></ol><h3 id="社会活动与项目经历："><a href="#社会活动与项目经历：" class="headerlink" title="社会活动与项目经历："></a><strong>社会活动与项目经历：</strong></h3><hr> <p><strong>2018.03-2019.03 Python：</strong></p><p>-Python讲师     </p><p>​         </p><br/><br/><br/><p><strong><b>2018.03-2018.05 Python机器学习书籍撰写 ：</b></strong></p><p>-撰写书籍         </p><p>​         </p><br/><br/><br/><p><strong><b>2017.08-2018.02 项目名称：CRM客户关系管理系统 :<b/></strong></p><p>-项目描述：实现企业客户数据管理，实现市场营销、销售、服务等活动自动化，并建立一个客户信息的收集、管理、分析、利用的系统。 </p><p>-项目功能：1. 可视化界面对各种数据进行手动录入操作；2. 运营数据的增、删、改、查；</p><p>-开发要点：1. 参考Django Admin、ModelForm自定义后台操作组件及数据库表操作；2. 基于角色进行权限控制；3. 自定义分页功能 </p><br/><br/><br/><p><strong>2017.02-2017.07  项目名称：公交管理系统 ：</strong></p><p>-项目描述：实现公交企业内部运营管理的自动化，实现运营部门，车队，调度各方面职责的权限细化，解决手动记录派班、车次和考勤的不便利性，便于通过数据进行计划、分析和执行。 </p><p>-项目功能：1. 可视化界面对各种数据进行手动录入操作；2. 运营数据的增、删、改、查；</p><p>-项目描述：实现公交企业内部运营管理的自动化，实现运营部门，车队，调度各方面职责的权限细化，解决手动记录派班、车次和考勤的不便利性，便于通过数据进行计划、分析和执行。</p><br/><br/><br/><p><strong>2016.07-2016.12    情感分析 :</strong></p><p>-运用自然语言处理、文本挖掘及计算机语言学等方法来识别和提取藏文语料素材中的主观信息    </p><br/><br/><br/><p><strong>2016.01-2017.02 网络安全：</strong></p><p>-主要负责网络安全</p><p>-代码审计漏洞挖掘，渗透测试评估以及漏洞修复方案 </p><p>-给广大客户的站点，提供WEB漏洞修复方案</p><br/><br/><p><strong>2015.08-2016.01 前端开发（实习）：</strong></p><p>-负责前端开发，协作后端工程师完成网站，前后端对接以及用户体验的构想并实现</p><br/><br/><h3 id="工作简历"><a href="#工作简历" class="headerlink" title="工作简历:"></a>工作简历:</h3><p><strong><hr></strong></p><p>-2016.01-2017.07 广州拓宏网络科技有限公司</p><p>-2016.01-2017.07 嘉峪科技有限公司</p><p>-2017.11-2018.06 水木为名教育科技有限公司</p><p>-2018.06-2019.03 老男孩教育科技有限公司（深圳分公司）</p><br/><br/><p><br/> <br/></p><br/><h3 id="IT、汉语水平、英语技能"><a href="#IT、汉语水平、英语技能" class="headerlink" title="IT、汉语水平、英语技能:"></a>IT、汉语水平、英语技能:</h3><p><strong><hr></strong></p><p>-2012.05 CCT全国高等学校计算机考试（二级）</p><p>-2015.01 Web开发（熟练掌握）</p><p>-2016.04 普通话水平测试（二级甲等）</p><p>-2017.06 CET-4（428分）</p><br/><br/><br/>  <h3 id="兴趣爱好："><a href="#兴趣爱好：" class="headerlink" title="兴趣爱好："></a><strong>兴趣爱好：</strong></h3><hr>  <p>-人工智能:（两年AI经验，目前研究自动程序计 ）<br>-英语：（坚持背单词，平均每天20个）<br>-电影：类型（动作，奇幻，喜剧，恐怖，冒险，爱情，警匪，科幻，温情，史诗）<br>-音乐：类型（经典，流行，嘻哈，英语，粤语，日语）<br>-健身：（大学坚持健身三年半）<br>-理财（买过基金，现在主要关注互联网金融，投资P2P）<br>-读书（心理学、经济类、历史类、科技类、人文类、金融类、政治类等）</p><br/><br/><br/><h3 id="自我评价："><a href="#自我评价：" class="headerlink" title="自我评价："></a>自我评价：</h3><hr><p>-乐于分享，帮助他人。善于团结他人，乐于奉献。</p><p>-自学能力强，逻辑清晰严谨，沟通表达能力强。</p><p>-有团队意识，以大局为重。可以为了集体利益牺牲个人利益。</p><p>-做事认真，有责任心。领导交办的事都会保质保量按时完成。</p><p>-总体来说是一个忠于自己价值观及自己所重视的人的理想主义者。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;姓名：温剑威&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;出生年月日：19960206&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;性</summary>
      
    
    
    
    <category term="关于博主" scheme="http://www.iwjw.top/categories/%E5%85%B3%E4%BA%8E%E5%8D%9A%E4%B8%BB/"/>
    
    
    <category term="简历" scheme="http://www.iwjw.top/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
</feed>
