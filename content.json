{"meta":{"title":"Shindavidwei","subtitle":"","description":"","author":"John Doe","url":"http://www.iwjw.top","root":"/"},"pages":[{"title":"","date":"2021-04-06T19:52:43.266Z","updated":"2020-04-07T16:16:20.528Z","comments":true,"path":"baidu_verify_kWenKmNYFP.html","permalink":"http://www.iwjw.top/baidu_verify_kWenKmNYFP.html","excerpt":"","text":"kWenKmNYFP"},{"title":"关于 温剑威（David Wei）","date":"2021-06-09T09:59:58.337Z","updated":"2021-06-09T09:59:58.270Z","comments":false,"path":"about/index.html","permalink":"http://www.iwjw.top/about/index.html","excerpt":"","text":"Content One.温剑威的人生事件纪要 Two.Resesume of David Wei Three.Annual Summery of David Wei ​"},{"title":"","date":"2021-04-06T19:52:43.362Z","updated":"2019-03-15T13:29:05.675Z","comments":false,"path":"/404.html","permalink":"http://www.iwjw.top/404.html","excerpt":"","text":"404 Not Found：该页无法显示-返回博客首页"},{"title":"分类","date":"2021-04-06T19:52:43.385Z","updated":"2018-10-04T14:11:17.000Z","comments":false,"path":"categories/index.html","permalink":"http://www.iwjw.top/categories/index.html","excerpt":"","text":""},{"title":"友链","date":"2021-06-11T03:47:31.005Z","updated":"2019-04-14T19:39:56.059Z","comments":true,"path":"links/index.html","permalink":"http://www.iwjw.top/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-04-06T19:52:43.411Z","updated":"2018-10-04T14:11:17.000Z","comments":false,"path":"repository/index.html","permalink":"http://www.iwjw.top/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-04-06T19:52:43.419Z","updated":"2018-10-04T14:11:17.000Z","comments":false,"path":"tags/index.html","permalink":"http://www.iwjw.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"java重要特点","slug":"202112081208","date":"2021-12-08T04:08:54.000Z","updated":"2021-12-08T05:51:11.924Z","comments":true,"path":"2021/12/08/202112081208/","link":"","permalink":"http://www.iwjw.top/2021/12/08/202112081208/","excerpt":"","text":"java语言是健壮的。java的强类型机制、异常处理、垃圾自动收集等j是ava程序健壮性的重要保障。 1.java语言是面向对象的(opp) 3.java是一门跨平台语言 4.java是一门解释型的语言、解释型语言、编译后的代码不能直接被机器执行、需要解释器来执行、编译型语言、编译后的代码，可以直接被机器执行，c/c++。","categories":[{"name":"编程开发","slug":"编程开发","permalink":"http://www.iwjw.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"java特点","slug":"java特点","permalink":"http://www.iwjw.top/tags/java%E7%89%B9%E7%82%B9/"}]},{"title":"Mysql","slug":"20210790","date":"2021-09-27T16:00:00.000Z","updated":"2021-07-09T13:35:58.108Z","comments":true,"path":"2021/09/28/20210790/","link":"","permalink":"http://www.iwjw.top/2021/09/28/20210790/","excerpt":"","text":"Mysql的三层结构-破除神秘 创建表 &amp;插入数据 #使用指令创建数据库create database hsp_01; #删除数据库指令drop database hsp_db01; #创建一个使用utf8字符集的hsp_db02 数据库create database hsp_db02 character set utf8; #创建一个使用utf8字符集，并带校对规则的hsp_db03数据库creata database hsp_db03 character set utf8_bin collate select * from t1 where name =’tom’; #查看操作 #查看前面创建的hsp_db02 数据库的定义信息show create database hsp_db02 #在创建数据库时，若名称和关键词冲突，请用反引号解决create database ‘create’ 备份恢复数据库 mysqldump -u root -p -B hsp_db02 &gt; d:\\backup.sql #备份数据库 source d://backup.sql #恢复数据库","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.iwjw.top/tags/Mysql/"}]},{"title":"Part1 of Php Base","slug":"20210808","date":"2021-08-07T08:57:06.000Z","updated":"2021-08-07T09:46:52.190Z","comments":true,"path":"2021/08/07/20210808/","link":"","permalink":"http://www.iwjw.top/2021/08/07/20210808/","excerpt":"","text":"1 今日目标 理解常量的概念 掌握常量的使用方式 理解魔术常量的概念和应用 理解string类型中单引号和双引号的区别 掌握PHP中数组的访问方式； 理解PHP代码的执行解析过程； 掌握逻辑运算符的使用； 理解短路运算的原理； 掌握自操作运算符的使用； 理解前置和后置自操作符的区别和原理； 了解强制转换的价值和应用场景； 理解if分支结构的应用场景； 理解switch分支结构的应用场景； 理解switch和if分支的区别； 2 常量在整个运行过程中，固定不变的值 定义常量 1、用define()函数定义常量 1234define(常量名，值，[是否区别大小写]) true表示不区分大小写，默认是false常量名前没有$符常量名推荐使用大写 例题： 12345&lt;?phpdefine(&#x27;NAME&#x27;,&#x27;tom&#x27;); //定义常量define(&#x27;PI&#x27;,3.14,true); //定义常量,不区分大小写echo NAME,&#x27;&lt;br&gt;&#x27;,Pi;//true表示不区分大小写，默认是区分大小写的。 2、定义常量可以用特殊字符，但是在调用的时候必须用constant关键字调用 12define(&#x27;%-%&#x27;,&#x27;tom&#x27;);echo constant(&#x27;%-%&#x27;); //通过constant获取特殊字符作为常量名的常量 3、判断常量是否定义，通过defined()判断常量是否已经定义 1234if(!defined(&#x27;NAME&#x27;))&#123; define(&#x27;NAME&#x27;,&#x27;berry&#x27;);&#125;echo NAME; //berry 4、还可以使用const关键字定义常量 12const NAME=&#x27;tom&#x27;;echo NAME; //tom 小结： 1、定义常量有两种方式，define()和const 2、常量在整个运行过程中值保持不变，常量不能重新定义 3、使用constant获取特殊字符做的常量名的值 4、defined()用来判断常量是否被定义 预定义常量PHP预先定义好的常量 例题 123echo PHP_VERSION,&#x27;&lt;br&gt;&#x27;; //PHP版本号echo PHP_OS,&#x27;&lt;br&gt;&#x27;; //PHP操作系统echo PHP_INT_MAX,&#x27;&lt;br&gt;&#x27;; //PHP中整型的最大值 魔术常量 魔术常量它们的值随着它们在代码中的位置改变而改变 123echo __LINE__,&#x27;&lt;br&gt;&#x27;; //获取当前行号echo __FILE__,&#x27;&lt;br&gt;&#x27;; //文件的完整路径和文件名echo __DIR__,&#x27;&lt;br&gt;&#x27;; //文件所在的目录 3 数据类型数据类型有两种：强类型和弱类型 PHP是弱类型 基本类型（标量类型）1、整型 存整数，PHP_INT_MAX获取整形最大值 PHP支持8、10、16机制的整数 12345678&lt;?php$num1=10; //十进制$num2=010; //八进制（数字前面加0）$num3=0x10; //十六进制（数字前面加0x）echo $num1,&#x27;&lt;br&gt;&#x27;; //10echo $num2,&#x27;&lt;br&gt;&#x27;; //8echo $num3; //16 进制转换 机制 缩写 单词 十进制 dec decimalist 二进制 bin binary 八进制 oct octonary 十六进制 hex hexdecimalist 例题 PHP提供了进制转换函数 12345echo decbin(123),&#x27;&lt;br&gt;&#x27;; //十进制转二进制echo bindec(1111011),&#x27;&lt;br&gt;&#x27;; //二进制转十进制echo dechex(123),&#x27;&lt;br&gt;&#x27;; //十进制转十六进制echo hexdec(&#x27;7b&#x27;),&#x27;&lt;br&gt;&#x27;; //十六进制转十进制echo decoct(123); //十进制转八进制 2、浮点型 浮点数在内存中保存的是近似值 浮点数不能参与比较 123var_dump(0.9==(1-0.1)); //bool(true) echo &#x27;&lt;br&gt;&#x27;;var_dump(0.1==(1-0.9)); //bool(false) 如果浮点数要比较，必须确定比较的位数 12345var_dump(0.9==(1-0.1)); //bool(true) echo &#x27;&lt;br&gt;&#x27;;var_dump(0.1==(1-0.9)); //bool(false) echo &#x27;&lt;br&gt;&#x27;;var_dump(bccomp(0.1,1-0.9,5)); //比较小数点后面5位 int(0) 0表示相等 提醒：如果一个整数超出了整形的范围，会自动的转成浮点型 3、布尔型 不能使用echo 和print输出布尔型，要使用var_dump()输出 12$flag=false;var_dump($flag); //bool(false) 4、字符串型 在PHP中单引号字符串和双引号字符串是有区别的 单引号字符串是真正的字符串 双引号字符串要解析字符串中的变量 例题 123$name=&#x27;tom&#x27;;echo &#x27;我的名字叫$name&#x27;,&#x27;&lt;br&gt;&#x27;; //我的名字叫$nameecho &quot;我的名字叫$name&quot;,&#x27;&lt;br&gt;&#x27;; //我的名字叫tom 例题：{ }取变量值 1234$name=&#x27;tom&#x27;;echo &#x27;$name是我的名字&#x27;,&#x27;&lt;br&gt;&#x27;; //$name是我的名字echo &quot;&#123;$name&#125;是我的名字&quot;,&#x27;&lt;br&gt;&#x27;; //&#123;&#125;表示获取变量的值（tom是我的名字）echo &quot;$&#123;name&#125;是我的名字&quot;,&#x27;&lt;br&gt;&#x27;; //$和&#123;只要挨着一起就可以（tom是我的名字） 输出特殊字符 12echo &#x27;毛主席说：\\&#x27;上课不要睡觉\\&#x27;&#x27;,&#x27;&lt;br&gt;&#x27;; //转义字符 毛主席说：&#x27;上课不要睡觉&#x27;echo &#x27;文件保存在c:\\\\&#x27;; //文件保存在c:\\ 字符串定界符 1231、有&lt;&lt;&lt;开头，后面跟的是标识符2、字符串定界符的结束符必须顶格写，前面不能有任何的空白字符3、字符串定界符分为两种，heredoc（双引号），nowdoc（单引号） 复合类型1、数组 在PHP中数组有两种形式，索引数组和关联数组 索引数组：用整数做下标，默认从0开始，后面依次加一 关联数组：用字符串做下标，通过=&gt;符号将下标和值关联起来 例题：数组的声明 12345678910111213141516&lt;?php//1、索引数组的声明$stu=array(&#x27;tom&#x27;,&#x27;berry&#x27;,&#x27;ketty&#x27;); //索引数组print_r($stu); //输出数组 Array ( [0] =&gt; tom [1] =&gt; berry [2] =&gt; ketty ) echo &#x27;&lt;hr&gt;&#x27;;echo $stu[0],&#x27;&lt;br&gt;&#x27;; //tomecho $stu[1],&#x27;&lt;br&gt;&#x27;; //berryecho $stu[2],&#x27;&lt;hr&gt;&#x27;; //ketty------------------------------------------//2、关联数组$emp=array(&#x27;name&#x27;=&gt;&#x27;李白&#x27;,&#x27;sex&#x27;=&gt;&#x27;男&#x27;,&#x27;age&#x27;=&gt;22);print_r($emp); //Array ( [name] =&gt; 李白 [sex] =&gt; 男 [age] =&gt; 22 ) echo &#x27;&lt;hr&gt;&#x27;;echo $emp[&#x27;name&#x27;],&#x27;&lt;br&gt;&#x27;; //李白echo $emp[&#x27;sex&#x27;],&#x27;&lt;br&gt;&#x27;; //男echo $emp[&#x27;age&#x27;]; //22 练习：写出数组的下标 1234567891011121314$array=array(1=&gt;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;);print_r($array); //Array ( [1] =&gt; a [2] =&gt; b [3] =&gt; c [4] =&gt; d ) echo &#x27;&lt;br&gt;&#x27;;--------------------------$array=array(&#x27;a&#x27;,2=&gt;&#x27;b&#x27;,&#x27;c&#x27;,5=&gt;&#x27;d&#x27;);print_r($array); //Array ( [0] =&gt; a [2] =&gt; b [3] =&gt; c [5] =&gt; d ) echo &#x27;&lt;br&gt;&#x27;;----------------------------$array=array(&#x27;a&#x27;,&#x27;name&#x27;=&gt;&#x27;b&#x27;,&#x27;c&#x27;,&#x27;sex&#x27;=&gt;&#x27;d&#x27;);print_r($array); //Array ( [0] =&gt; a [name] =&gt; b [1] =&gt; c [sex] =&gt; d ) echo &#x27;&lt;br&gt;&#x27;;------------------------------$array=array(1=&gt;&#x27;a&#x27;,1=&gt;&#x27;b&#x27;,1=&gt;&#x27;c&#x27;,&#x27;d&#x27;);print_r($array); //Array ( [1] =&gt; c [2] =&gt; d ) 数组的下标只能是正整数和字符串 思考如下下标 123456789$stu[true]=&#x27;tom&#x27;; //转成1$stu[false]=&#x27;berry&#x27;; //转成0$stu[12.9]=&#x27;aa&#x27;; //转成12（取整数部分）$stu[-10]=&#x27;bb&#x27;; //负数可以做下标$stu[-12.3]=&#x27;cc&#x27;; //取负整数$stu[&#x27;10&#x27;]=&#x27;dd&#x27;; //字符串数字转成数字$stu[&#x27;&#x27;]=&#x27;ee&#x27;; //空字符串也可以做下标$stu[null]=&#x27;ff&#x27;; //转成空字符串做下标print_r($stu); 短数组语法，可以直接通过中括号声明数组 12$stu=[&#x27;tom&#x27;,&#x27;berry&#x27;,&#x27;ketty&#x27;];print_r($stu); //Array ( [0] =&gt; tom [1] =&gt; berry [2] =&gt; ketty ) 多学一招：在PHP7.1中可以支持数组的赋值 12345//例题，两个数交换$num1=10;$num2=20;[$num1,$num2]=[$num2,$num1];echo $num1,&#x27;&lt;br&gt;&#x27;,$num2; 二维数组的声明 123456789101112131415161718192021222324$stu=[ [&#x27;name&#x27;=&gt;&#x27;tom&#x27;,&#x27;sex&#x27;=&gt;&#x27;男&#x27;,&#x27;age&#x27;=&gt;22], [&#x27;name&#x27;=&gt;&#x27;berry&#x27;,&#x27;sex&#x27;=&gt;&#x27;女&#x27;,&#x27;age&#x27;=&gt;23]];echo &#x27;&lt;pre&gt;&#x27;;print_r($stu);//运行结果Array( [0] =&gt; Array ( [name] =&gt; tom [sex] =&gt; 男 [age] =&gt; 22 ) [1] =&gt; Array ( [name] =&gt; berry [sex] =&gt; 女 [age] =&gt; 23 )) 多学一招：字符串可以通过数组的方式去调用 12echo &#x27;abc&#x27;[0],&#x27;&lt;br&gt;&#x27;; //a echo &#x27;abc&#x27;[-1],&#x27;&lt;br&gt;&#x27;; //c，从右边开始取第一个 7.1开始支持 小结： 1、数组在内存中一段连续的空间 2、如果要保存同一类型的多个数据就使用数组 2、对象 对象在后面专门讲解（面向对象编程） 特殊类型1、资源 2、null 提醒：在PHP中 null和NULL是一样的，不区分大小写 类型转换1、自动类型转换：当提供的类型和需要的类型不一致的时候会自动进行类型转换 12345678$num=10;if($num)&#123; //自动将数字转成布尔型 echo &#x27;aa&#x27;;&#125;else&#123; echo &#x27;bb&#x27;;&#125;---------------------------------echo &#x27;20&#x27;-10; //自动的将字符串转成数字 2、强制类型转换 语法：（数据类型）数据 123&lt;?php$num1=&#x27;12&#x27;;var_dump($num1,(int)$num1,(float)$num1); //string(2) &quot;12&quot; int(12) float(12) 其他类型和布尔之间的转换 规则：0、空为假，非0非空为真 12345678910111213141516&lt;?phpvar_dump((bool)&#x27;abc&#x27;); echo &#x27;&lt;br&gt;&#x27;; //bool(true) var_dump((bool)&#x27;&#x27;); echo &#x27;&lt;br&gt;&#x27;; //bool(false) var_dump((bool)&#x27;0&#x27;); echo &#x27;&lt;br&gt;&#x27;; //bool(false) var_dump((bool)&#x27;0.0&#x27;); echo &#x27;&lt;br&gt;&#x27;; //bool(true) var_dump((bool)&#x27;00&#x27;); echo &#x27;&lt;br&gt;&#x27;; //bool(true) var_dump((bool)&#x27;false&#x27;); echo &#x27;&lt;br&gt;&#x27;; //bool(true) var_dump((bool)&#x27;null&#x27;); echo &#x27;&lt;br&gt;&#x27;; //bool(true) var_dump((bool)1); echo &#x27;&lt;br&gt;&#x27;; //bool(true) var_dump((bool)0); echo &#x27;&lt;br&gt;&#x27;; //bool(false) var_dump((bool)-10); echo &#x27;&lt;br&gt;&#x27;; //bool(true) var_dump((bool)0.0); echo &#x27;&lt;br&gt;&#x27;; //bool(false) var_dump((bool)array()); echo &#x27;&lt;br&gt;&#x27;; //bool(false) var_dump((bool)array(1)); echo &#x27;&lt;br&gt;&#x27;; //bool(true) var_dump((bool)array(false)); echo &#x27;&lt;br&gt;&#x27;;//bool(true) var_dump((bool)null); echo &#x27;&lt;br&gt;&#x27;; //bool(false) 4 运算符算术运算符 一元运算符 二元运算符 ++ + – - * / % (取模) 注意：在PHP中，算术运算符只能做数学运算。 1234&lt;?phpecho &#x27;10&#x27;+&#x27;20&#x27;,&#x27;&lt;br&gt;&#x27;; //30echo &#x27;10ab&#x27;+&#x27;20cd&#x27;,&#x27;&lt;br&gt;&#x27;; //30echo &#x27;ab10&#x27;+&#x27;cd20&#x27;,&#x27;&lt;br&gt;&#x27;; //0 ++前置：先自增再运算 ++后置：先运算再自增 练习 123456789$num=10;$num++;echo $num; //11-------------------------$num=10;echo $num++; //10------------------------$num=10;echo ++$num; //11 练习 1234567&lt;?php$num=5;echo (++$num)+(++$num)+(++$num); //21-------------------------&lt;?php$num=5;echo ($num++)+($num++)+($num++); //18 关系运算符（比较运算符）12345678&gt;&gt;=&lt;&lt;===!====!== 比较运算符的运算结果是布尔值 逻辑运算符123456&amp; 与：运算符两边的表达式都要计算| 或：运算符两边的表达式都要计算&amp;&amp; 短路与：如果前面的条件不满足，后面的条件就不用计算了|| 短路或! 非 例题 12345678910111213141516&lt;?php$a=5;$b=10;if($a&gt;10 &amp;&amp; ++$a&gt;20) echo &#x27;你好吗&#x27;;echo $a; //5//分析：$a&gt;10为false, 与中只要有一个是false，另一个不用计算结果肯定是false，所以短路与++a就不计算了，结果是5----------------------------&lt;?php$a=5;$b=10;if($a&lt;10 || ++$a&gt;20) echo &#x27;你好吗&#x27;;echo $a; //5//分析：短路或只要有一个为true，结果肯定是true，$a&lt;10结果是true，后面++$a就不用计算了。 赋值运算符123456= //赋值+= //a+=b a=a+b-=*=/=%= 字符串连接符(.)1echo &#x27;aa&#x27;.&#x27;bb&#x27;; //字符串链接 aabb 错误抑制符(@)错误抑制符只对表达式有效 12&lt;?phpecho @($aa+$bb); //错误抑制 三元运算符(?:)语法： 12表达式?值1：值2//表达式的值为true，返回值1，否则返回值2 练习 123&lt;?php$num=11;echo $num%2?&#x27;奇数&#x27;:&#x27;偶数&#x27;; null合并运算符(??)PHP7.0以后才支持 例题 12&lt;?phpecho $name??&#x27;姓名不详&#x27;; //姓名不详 多学一招：两个用来判断的函数 12isset()：判断变量是否被设置，并且设置的不是nullempty()：检查一个变量是否为空，能转成false全部是空，[&#x27;&#x27;,0,0.0,array(),null] 例题 12345echo isset($name)?$name:&#x27;姓名不详&#x27;; //姓名不详echo &#x27;&lt;hr&gt;&#x27;;$stu=array();echo empty($stu)?&#x27;空&#x27;:&#x27;非空&#x27;; //空 5 判断语法单分支 123if(条件)&#123; &#125; 双分支 12345if(条件)&#123; //代码块1&#125;else&#123; //代码块2&#125; 多分支 1234567if(条件)&#123; &#125;elseif(条件)&#123; //注意：elseif之间没有空格 &#125;else&#123; &#125; 多路选择 12345678910switch(表达式)&#123; case 常量： //代码块 break; case 常量： //代码块 break; default: //代码块&#125; 例题例题一、判断闰年（练习双分支） 步骤： 1231、创建表单2、提交数据3、在服务器获取提交的数据，并判断 代码实现 123456789101112131415161718192021222324252627282930313233&lt;body&gt;&lt;?phpif(!empty($_POST))&#123; //$_POST不为空说明有post提交的数据 //var_dump($_POST); $year=$_POST[&#x27;year&#x27;]; //获取年份 if($year==&#x27;&#x27;)&#123; echo &#x27;您没有输入年份&#x27;; &#125;else&#123; if(is_numeric($year))&#123; //判断$year是否是数字或字符串数字 $year+=0; //将字符串数字转成数字型 if(is_int($year))&#123; //is_int用来检测变量是否是整型 if($year&lt;1)&#123; echo &#x27;年份必须正整数&#x27;; &#125;else&#123; if($year%4==0 &amp;&amp; $year%100!=0 || $year%400==0) echo &quot;&#123;$year&#125;是闰年&quot;; else echo &quot;&#123;$year&#125;是平年&quot;; &#125; &#125;else&#123; echo &#x27;您输入的不是整数&#x27;; &#125; &#125;else&#123; echo &#x27;您输入的不是数字&#x27;; &#125; &#125;&#125; ?&gt;&lt;form method=&quot;post&quot; action=&quot;&quot;&gt; 请输入年份： &lt;input type=&quot;text&quot; name=&quot;year&quot;&gt; &lt;br /&gt; &lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;判断闰年&quot;&gt;&lt;/form&gt;&lt;/body&gt; 运行结果 小结： 1、$_POST是一个变量，用来保存post提交的数据 2、action=’’表示将数据提到本页面 3、is_numeric()判断变量是否是数字或字符串数字 4、is_int()判断变量是否是整型 5、if、else后面如果只是一句代码，大括号可以省略 例题二：判断成绩(练习多分支) 目标：输入语文和数学，判断等级 代码实现 1234567891011121314151617181920212223242526272829303132&lt;body&gt;&lt;?phpif(isset($_POST[&#x27;button&#x27;]))&#123; //点击了提交按钮 $ch=$_POST[&#x27;ch&#x27;]; //获取语文成绩 $math=$_POST[&#x27;math&#x27;]; //获取数学成绩 if($ch==&#x27;&#x27; || !is_numeric($ch) || $ch&lt;0 || $ch&gt;100)&#123; echo &#x27;语文成绩必须在0-100之间&#x27;; &#125; elseif($math==&#x27;&#x27; || !is_numeric($math) || !($math&gt;=0 &amp;&amp; $math&lt;=100))&#123; echo &#x27;数学成绩必须在0-100之间&#x27;; &#125;else&#123; $avg=($ch+$math)/2; //求平均值 echo &quot;您的平均分是：&#123;$avg&#125;&lt;br&gt;&quot;; if($avg&gt;=90) echo &#x27;A&#x27;; elseif($avg&gt;=80) echo &#x27;B&#x27;; elseif($avg&gt;=70) echo &#x27;C&#x27;; elseif($avg&gt;=60) echo &#x27;D&#x27;; else echo &#x27;E&#x27;; &#125;&#125;?&gt;&lt;form method=&quot;post&quot; action=&quot;&quot;&gt; 语文: &lt;input type=&quot;text&quot; name=&quot;ch&quot;&gt; &lt;br /&gt; 数学： &lt;input type=&quot;text&quot; name=&quot;math&quot;&gt; &lt;br /&gt; &lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;判断成绩&quot;&gt;&lt;/form&gt;&lt;/body&gt; 运行结果 例题三：更改颜色(switch-case) 目标：将文字的颜色改成选择的颜色 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;body&gt;&lt;?phpif(isset($_POST[&#x27;button&#x27;])) &#123; switch($_POST[&#x27;color&#x27;])&#123; case &#x27;1&#x27;: $color=&#x27;#FF0000&#x27;; //红色 break; case &#x27;2&#x27;: $color=&#x27;#009900&#x27;; // 绿色 break; case &#x27;3&#x27;: $color=&#x27;#0000FF&#x27;; //蓝色 break; default: $color=&#x27;#000000&#x27;; //黑色 &#125; echo &lt;&lt;&lt;str &lt;script type=&quot;text/javascript&quot;&gt; window.onload=function()&#123; document.getElementById(&#x27;shi&#x27;).style.color=&#x27;$color&#x27;; &#125; &lt;/script&gt;str;&#125;?&gt;&lt;div id=&quot;shi&quot;&gt; 锄禾日当午， &lt;br /&gt; 汗滴禾下土。 &lt;br /&gt; 谁知盘中餐， &lt;br /&gt; 粒粒皆辛苦。 &lt;br /&gt;&lt;/div&gt;&lt;form method=&quot;post&quot; action=&quot;&quot;&gt; &lt;select name=&quot;color&quot;&gt; &lt;option value=&quot;0&quot;&gt;请选择颜色&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;红色&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;绿色&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;蓝色&lt;/option&gt; &lt;/select&gt; &lt;input type=&quot;submit&quot; name=&quot;button&quot; value=&quot;更改颜色&quot;&gt;&lt;/form&gt;&lt;/body&gt; 运行结果 6 作业计算器","categories":[],"tags":[{"name":"php基础，逻辑判断","slug":"php基础，逻辑判断","permalink":"http://www.iwjw.top/tags/php%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD/"},{"name":"模式常量","slug":"模式常量","permalink":"http://www.iwjw.top/tags/%E6%A8%A1%E5%BC%8F%E5%B8%B8%E9%87%8F/"}]},{"title":"Go语言基础之变量和常量","slug":"20210616","date":"2021-06-16T03:34:15.000Z","updated":"2021-06-15T04:03:08.129Z","comments":true,"path":"2021/06/16/20210616/","link":"","permalink":"http://www.iwjw.top/2021/06/16/20210616/","excerpt":"","text":"变量和常量是编程中必不可少的部分，也是很好理解的一部分。 标识符在编程语言中标识符就是程序员定义的具有特殊意义的词，比如变量名、常量名、函数名等等。 Go语言中标识符由字母数字和_(下划线）组成，并且只能以字母和_开头。 举几个例子：abc, _, _123, a123。 关键字关键字是指编程语言中预先定义好的具有特殊含义的标识符。 关键字和保留字都不建议用作变量名。 Go语言中有25个关键字： 12345break default func interface selectcase defer go map structchan else goto package switchconst fallthrough if range typecontinue for import return var 此外，Go语言中还有37个保留字。 12345678910Constants: true false iota nil Types: int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr float32 float64 complex128 complex64 bool byte rune string errorFunctions: make len cap new append copy close delete complex real imag panic recover 变量程序运行过程中的数据都是保存在内存中，我们想要在代码中操作某个数据时就需要去内存上找到这个变量，但是如果我们直接在代码中通过内存地址去操作变量的话，代码的可读性会非常差而且还容易出错，所以我们就利用变量将这个数据的内存地址保存起来，以后直接通过这个变量就能找到内存上对应的数据了。 变量类型变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。 Go语言中的每一个变量都有自己的类型，并且变量必须经过声明才能开始使用。 变量声明Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。 并且Go语言的变量声明后必须使用。 标准声明Go语言的变量声明格式为： 1var 变量名 变量类型 变量声明以关键字var开头，变量类型放在变量的后面，行尾无需分号。 举个例子： 123var name stringvar age intvar isOk bool 批量声明每声明一个变量就需要写var关键字会比较繁琐，go语言中还支持批量变量声明： 123456var ( a string b int c bool d float32) 变量初始化Go语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为false。 切片、函数、指针变量的默认为nil。 当然我们也可在声明变量的时候为其指定初始值。变量初始化的标准格式如下： 1var 变量名 类型 = 表达式 举个例子： 12var name string = &quot;Q1mi&quot;var age int = 18 或者一次初始化多个变量 1var name, age = &quot;Q1mi&quot;, 20 类型推导有时候我们会将变量的类型省略，这个时候编译器会根据等号右边的值来推导变量的类型完成初始化。 12var name = &quot;Q1mi&quot;var age = 18 短变量声明在函数内部，可以使用更简略的 := 方式声明并初始化变量。 12345678910111213package mainimport ( &quot;fmt&quot;)// 全局变量mvar m = 100func main() &#123; n := 10 m := 200 // 此处声明局部变量m fmt.Println(m, n)&#125; 匿名变量在使用多重赋值时，如果想要忽略某个值，可以使用匿名变量（anonymous variable）。 匿名变量用一个下划线_表示，例如： 123456789func foo() (int, string) &#123; return 10, &quot;Q1mi&quot;&#125;func main() &#123; x, _ := foo() _, y := foo() fmt.Println(&quot;x=&quot;, x) fmt.Println(&quot;y=&quot;, y)&#125; 匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在Lua等编程语言里，匿名变量也被叫做哑元变量。) 注意事项： 函数外的每个语句都必须以关键字开始（var、const、func等） :=不能使用在函数外。 _多用于占位，表示忽略值。 常量相对于变量，常量是恒定不变的值，多用于定义程序运行期间不会改变的那些值。 常量的声明和变量声明非常类似，只是把var换成了const，常量在定义的时候必须赋值。 12const pi = 3.1415const e = 2.7182 声明了pi和e这两个常量之后，在整个程序运行期间它们的值都不能再发生变化了。 多个常量也可以一起声明： 1234const ( pi = 3.1415 e = 2.7182) const同时声明多个常量时，如果省略了值则表示和上面一行的值相同。 例如： 12345const ( n1 = 100 n2 n3) 上面示例中，常量n1、n2、n3的值都是100。 iotaiota是go语言的常量计数器，只能在常量的表达式中使用。 iota在const关键字出现时将被重置为0。const中每新增一行常量声明将使iota计数一次(iota可理解为const语句块中的行索引)。 使用iota能简化定义，在定义枚举时很有用。 举个例子： 123456const ( n1 = iota //0 n2 //1 n3 //2 n4 //3 ) 几个常见的iota示例:使用_跳过某些值 123456const ( n1 = iota //0 n2 //1 _ n4 //3 ) iota声明中间插队 1234567const ( n1 = iota //0 n2 = 100 //100 n3 = iota //2 n4 //3 ) const n5 = iota //0 定义数量级 （这里的&lt;&lt;表示左移操作，1&lt;&lt;10表示将1的二进制表示向左移10位，也就是由1变成了10000000000，也就是十进制的1024。同理2&lt;&lt;2表示将2的二进制表示向左移2位，也就是由10变成了1000，也就是十进制的8。） 12345678const ( _ = iota KB = 1 &lt;&lt; (10 * iota) MB = 1 &lt;&lt; (10 * iota) GB = 1 &lt;&lt; (10 * iota) TB = 1 &lt;&lt; (10 * iota) PB = 1 &lt;&lt; (10 * iota) ) 多个iota定义在一行 12345const ( a, b = iota + 1, iota + 2 //1,2 c, d //2,3 e, f //3,4 )","categories":[],"tags":[{"name":"变量","slug":"变量","permalink":"http://www.iwjw.top/tags/%E5%8F%98%E9%87%8F/"},{"name":"常量","slug":"常量","permalink":"http://www.iwjw.top/tags/%E5%B8%B8%E9%87%8F/"}]},{"title":"Go语言基础","slug":"20210615","date":"2021-06-14T16:00:00.000Z","updated":"2021-06-15T03:46:52.681Z","comments":true,"path":"2021/06/15/20210615/","link":"","permalink":"http://www.iwjw.top/2021/06/15/20210615/","excerpt":"","text":"1.Go语言基础之变量和常量","categories":[{"name":"编程开发","slug":"编程开发","permalink":"http://www.iwjw.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Go语言基础","slug":"Go语言基础","permalink":"http://www.iwjw.top/tags/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"}]},{"title":"为什么不该追求爱情？","slug":"20210813","date":"2021-06-14T16:00:00.000Z","updated":"2021-08-13T05:08:56.617Z","comments":true,"path":"2021/06/15/20210813/","link":"","permalink":"http://www.iwjw.top/2021/06/15/20210813/","excerpt":"","text":"1.人际链接&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大部分的时候，我们在人际互动上面，太仰赖个人直觉，以至于我们做了很多这些直觉的事情，把与我产生链接的人从我们身边推开， 为什么这样说？举个例子 比如 ，你在一个高档百货超市逛，你发现那里刚好有一个展示区，有人在推广葡萄酒，刚好你走过去， 展示区的售前，请你喝试饮葡萄酒，你喝了一杯，然后就和展示区的售前聊了一下，聊得很愉快，你就想买一支，觉得蛮好喝的。 你就问售前： 这支酒多少钱？ 他说：哦 这支酒不贵 3200块钱一瓶。价钱还不是最主要的问题，关键是你当时身上, 真的没有带那么多钱，也没有带任何的信用卡，可支付，所以你就特别尴尬，售前看你不说话； 售前：这位先生，是不是觉得这只葡萄酒太便宜了？ 我其实还有一支一万多块钱的，我开了请你喝， 要不要；你慌忙的和他摇手示意，“不要，不要” ，这时你和售前说，不好意思，忽然想起了有些事，你就溜走了。 为什么你溜走？ 很简单，你觉得拿人手短，他请你喝了酒，他陪你聊天，花那么多时间招待你，你没办法回馈他。 他还想弄一个更好的酒给你，你更加没有办法回馈，你没有带钱出来，所以你选择慌忙地逃走。 在感情里也是同样的概念 我们很多时候，会觉得请对方吃牛肉面，她不爱我，是不是我请她的东西太便宜了，我请她吃贵的高档的，她就应该会爱我了吧？ 可是实际上当然不是那么回事，对方依然会觉得，你做这样的事情，我无法偿还，无以为报，所以她更加努力的躲避我。 这是可能会产生我们不希望的一条死路，可是它几乎会发生， 待更新…..","categories":[{"name":"情感","slug":"情感","permalink":"http://www.iwjw.top/categories/%E6%83%85%E6%84%9F/"}],"tags":[{"name":"爱情","slug":"爱情","permalink":"http://www.iwjw.top/tags/%E7%88%B1%E6%83%85/"}]},{"title":"如何用王家卫的方式表白","slug":"20210612","date":"2021-06-10T16:00:00.000Z","updated":"2021-06-11T02:52:59.294Z","comments":true,"path":"2021/06/11/20210612/","link":"","permalink":"http://www.iwjw.top/2021/06/11/20210612/","excerpt":"","text":"有一次，王家卫让演员们翻译“i love you” 有的演员翻译成 “我爱你”。 王家伟说：“怎么可以这样讲话 应该是 ‘我已经很久没有做过摩托车了，也很久未试过这么接近一个人了， 虽然我知道这条路不是很远，我知道不就自己就会下车，可是这一分钟，我觉得很暖’”。 可以见得王家卫荣的表白方式应该是深含蓄但是洒脱、不羁、不纠缠。 先来几个王家卫本人的经典示爱桥段： 1.以前我认为那句话很重要，因为我觉得有些话说出来就是一生一世，现在想一想，说不说也没有分别， 有些事是会变的。 2.我很快就适应了这种生活，虽然有时只是逢场作戏，虽然有许多只是露水情缘，不过没关系了，哪来那么多一生一世。 3.虽然我很喜欢她，但是我不想让她知道，因为我明白得不到的东西永远是最好的。每次我凝望着那小孩子，我知道她的心里其实在想着另一个人。 4.有时候我昨天遇到一个人，感觉他非常有意思，印象深刻，但后来就再也碰不上了，人生就是这样。 5.我只是希望他放开我，结果，他现在放手了，我只感到痛。我痛得肝肠寸断。 6.想想说人生无悔，都是赌气的话，人生若无悔，那该多无趣啊。叶先生，说句真心话，我心里有过你。我把这话告诉你也没什么，喜欢人不犯法，可我也只能到喜欢为止了。这些话我没对谁说过，今晚见了你，不知道为什么就都说出来了。就让你我的恩怨像棋盘一样，保留在那儿。你多保重。 7.厨房里有煮好的饭，另外我还买了几个杯子，我知道，用不了多久就都会被打破，所以我偷偷藏起了一个，到有一天你需要那个杯子的时候，就打一个电话给我，我会告诉你放在什么地方。 8.十六号，四月十六号。一九六零年四月十六号下午三点之前的一分钟你和我在一起，因为你，我会记住这一分钟。 9.我知道那个人不会再来，可我还是在等。我在门口坐了两天两夜，看着天空不断变化，我才发现原来我到这里这么久，却从来没有看清楚这片天空。 我曾经爱上一个人，后来她走了。我去2046，是因为我以为她在那里等我，但我找不到她。我很想知道她到底喜不喜欢我，但我始终得不到答案。 那么现在，掌握了基本风格，也赏析了经典例句，我们就可以开始尝试着创作了。 1.我承认我是在意你的，但这不能成为我限制你的借口。你说你不讨厌蓝莓，但你还是为橙子结了账。我该走了，你不讨厌我，我代替不了他。 2.遇见你的时候，说实话，挺意外的。过去的我和现在的你一样，都不相信谁能忘不了谁。想赞美，天时地利，仔细想了想，还是没说出口。差了点人和，其他都不算好运气。 3.不知道现在有没有人和你一起看月亮，但我知道不该追问的问题，永远也不会有答案。大概也不是很遗憾，都是些闲敲棋子落灯花时的闲情。我总是这样和别人说，用来说服自己轻一点回忆你。 4.那天你说想吃巷子口的拉面。我买了两碗，你却不在身边。不加葱，多辣，你看我记得多清楚。 5.和你在一起的三个小时真是非常愉快。你许诺以后，我没当真，我知道天一亮一切都会结束了。即使这样，你在我左边，月亮在我右边的那一秒，我还是忍不住想，万一呢，万一你会改变主意。 天亮后你还是走了，我很开心。你没因为我改变，正是我欣赏的一面。 当然了，以上只是练笔，不是示范，想要非常“王家卫”，最重要的还是需要动用深情，需要你“爱过”。 ———- 转载于知乎有书","categories":[{"name":"情感","slug":"情感","permalink":"http://www.iwjw.top/categories/%E6%83%85%E6%84%9F/"}],"tags":[{"name":"情感","slug":"情感","permalink":"http://www.iwjw.top/tags/%E6%83%85%E6%84%9F/"}]},{"title":"Resume of David Wei","slug":"201609270452","date":"2016-09-26T20:55:00.000Z","updated":"2019-09-27T01:25:18.900Z","comments":true,"path":"2016/09/27/201609270452/","link":"","permalink":"http://www.iwjw.top/2016/09/27/201609270452/","excerpt":"","text":"姓名：温剑威 出生年月日：19960206 性别：男 现居住地：广州市天河区 电话：13926259736 mail:jww1996@foxmail.com IT技能专长： 熟练使用python进行后端开发 熟练使用Django ：ORM，Form，Template，Tags，Middleware自定制等技术 熟练使用PHP，ThinkPHP ，HTML，CSS，JavaScript，JQuery，Ajax，Bootstrap等页面开发技术 熟练Socket网络编程，多线程，多进程，协程，异步IO多路复用如select/poll/epoll 的原理及使用 熟练使用装饰器，迭代器，生成器及单例模式的使用 熟练操作MySQL，基础的增删改查语句，会使用关联查询等较复杂语句，对存储过程，事物操做有一定的了解 熟悉requests模块及爬虫框架Scrapy进行网页爬取，解析，并了解其原理 熟悉Numpy、Pandas、Matplotlib、Seaborn数据分析库 熟悉Tensorflow、Caffe等人工智能开发框架 熟悉机器学习常用算法（线性回归、逻辑回归、贝叶斯、决策树、SVM、降维、聚类、EM等）及代码实现 了解深度学习算法RNN,LSTM,GAN,DCGAN,DQN,CNN等 了解常见的算法与数据结构 如（冒泡排序，堆排序，快速排序）等 ​ 社会活动与项目经历： 2018.03-2019.03 Python： -Python讲师 ​ 2018.03-2018.05 Python机器学习书籍撰写 ： -撰写书籍 ​ 2017.08-2018.02 项目名称：CRM客户关系管理系统 : -项目描述：实现企业客户数据管理，实现市场营销、销售、服务等活动自动化，并建立一个客户信息的收集、管理、分析、利用的系统。 -项目功能：1. 可视化界面对各种数据进行手动录入操作；2. 运营数据的增、删、改、查； -开发要点：1. 参考Django Admin、ModelForm自定义后台操作组件及数据库表操作；2. 基于角色进行权限控制；3. 自定义分页功能 2017.02-2017.07 项目名称：公交管理系统 ： -项目描述：实现公交企业内部运营管理的自动化，实现运营部门，车队，调度各方面职责的权限细化，解决手动记录派班、车次和考勤的不便利性，便于通过数据进行计划、分析和执行。 -项目功能：1. 可视化界面对各种数据进行手动录入操作；2. 运营数据的增、删、改、查； -项目描述：实现公交企业内部运营管理的自动化，实现运营部门，车队，调度各方面职责的权限细化，解决手动记录派班、车次和考勤的不便利性，便于通过数据进行计划、分析和执行。 2016.07-2016.12 情感分析 : -运用自然语言处理、文本挖掘及计算机语言学等方法来识别和提取藏文语料素材中的主观信息 2016.01-2017.02 网络安全： -主要负责网络安全 -代码审计漏洞挖掘，渗透测试评估以及漏洞修复方案 -给广大客户的站点，提供WEB漏洞修复方案 2015.08-2016.01 前端开发（实习）： -负责前端开发，协作后端工程师完成网站，前后端对接以及用户体验的构想并实现 工作简历: -2016.01-2017.07 广州拓宏网络科技有限公司 -2016.01-2017.07 嘉峪科技有限公司 -2017.11-2018.06 水木为名教育科技有限公司 -2018.06-2019.03 老男孩教育科技有限公司（深圳分公司） IT、汉语水平、英语技能: -2012.05 CCT全国高等学校计算机考试（二级） -2015.01 Web开发（熟练掌握） -2016.04 普通话水平测试（二级甲等） -2017.06 CET-4（428分） 兴趣爱好： -人工智能:（两年AI经验，目前研究自动程序计 ）-英语：（坚持背单词，平均每天20个）-电影：类型（动作，奇幻，喜剧，恐怖，冒险，爱情，警匪，科幻，温情，史诗）-音乐：类型（经典，流行，嘻哈，英语，粤语，日语）-健身：（大学坚持健身三年半）-理财（买过基金，现在主要关注互联网金融，投资P2P）-读书（心理学、经济类、历史类、科技类、人文类、金融类、政治类等） 自我评价： -乐于分享，帮助他人。善于团结他人，乐于奉献。 -自学能力强，逻辑清晰严谨，沟通表达能力强。 -有团队意识，以大局为重。可以为了集体利益牺牲个人利益。 -做事认真，有责任心。领导交办的事都会保质保量按时完成。 -总体来说是一个忠于自己价值观及自己所重视的人的理想主义者。","categories":[{"name":"关于博主","slug":"关于博主","permalink":"http://www.iwjw.top/categories/%E5%85%B3%E4%BA%8E%E5%8D%9A%E4%B8%BB/"}],"tags":[{"name":"简历","slug":"简历","permalink":"http://www.iwjw.top/tags/%E7%AE%80%E5%8E%86/"}]}],"categories":[{"name":"编程开发","slug":"编程开发","permalink":"http://www.iwjw.top/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"},{"name":"情感","slug":"情感","permalink":"http://www.iwjw.top/categories/%E6%83%85%E6%84%9F/"},{"name":"关于博主","slug":"关于博主","permalink":"http://www.iwjw.top/categories/%E5%85%B3%E4%BA%8E%E5%8D%9A%E4%B8%BB/"}],"tags":[{"name":"java特点","slug":"java特点","permalink":"http://www.iwjw.top/tags/java%E7%89%B9%E7%82%B9/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.iwjw.top/tags/Mysql/"},{"name":"php基础，逻辑判断","slug":"php基础，逻辑判断","permalink":"http://www.iwjw.top/tags/php%E5%9F%BA%E7%A1%80%EF%BC%8C%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD/"},{"name":"模式常量","slug":"模式常量","permalink":"http://www.iwjw.top/tags/%E6%A8%A1%E5%BC%8F%E5%B8%B8%E9%87%8F/"},{"name":"变量","slug":"变量","permalink":"http://www.iwjw.top/tags/%E5%8F%98%E9%87%8F/"},{"name":"常量","slug":"常量","permalink":"http://www.iwjw.top/tags/%E5%B8%B8%E9%87%8F/"},{"name":"Go语言基础","slug":"Go语言基础","permalink":"http://www.iwjw.top/tags/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"},{"name":"爱情","slug":"爱情","permalink":"http://www.iwjw.top/tags/%E7%88%B1%E6%83%85/"},{"name":"情感","slug":"情感","permalink":"http://www.iwjw.top/tags/%E6%83%85%E6%84%9F/"},{"name":"简历","slug":"简历","permalink":"http://www.iwjw.top/tags/%E7%AE%80%E5%8E%86/"}]}